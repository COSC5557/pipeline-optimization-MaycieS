# -*- coding: utf-8 -*-
"""ML Pipeline

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M1LgzjfiwE6jdlpd5BPSrZHPlTGmZXY1
"""

from google.colab import files


uploaded = files.upload()

import pandas as pd
wn = pd.read_csv('winequality2.csv')
wn.head()
wn.isnull().values.any()

wn.describe()

x = wn.drop('quality', axis = 1)
y = wn['quality']
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y)

from sklearn.preprocessing import StandardScaler

from sklearn.ensemble import GradientBoostingClassifier
from sklearn.pipeline import Pipeline
from sklearn.feature_selection import VarianceThreshold

pipe = Pipeline([
('scaler', StandardScaler()),
('selector', VarianceThreshold()),
('classifier', GradientBoostingClassifier()),

])

pipe.fit(x_train, y_train)

print('Training set score: ' + str(pipe.score(x_train,y_train)))
print('Test set score: ' + str(pipe.score(x_test,y_test)))

parameters = {
    'classifier__max_depth': [1, 2, 3, 4, 5],
    'classifier__min_samples_leaf': [10, 20, 30]
}

from sklearn.model_selection import GridSearchCV
grid = GridSearchCV(pipe, parameters, cv=3)
grid.fit(x_train, y_train)

print('Train score: ' + str(grid.score(x_train, y_train)))
print('Test score: ' + str(grid.score(x_test, y_test)))

best_params = grid.best_params_
print(best_params)
best_pipe = grid.best_estimator_
print(best_pipe)

from sklearn.neighbors import KNeighborsClassifier
pipe2 = Pipeline([
('scaler', StandardScaler()),
('selector', VarianceThreshold()),
('classifier', KNeighborsClassifier()),

])

pipe2.fit(x_train, y_train)

print('Train score: ' + str(pipe2.score(x_train,y_train)))
print('Test score: ' + str(pipe2.score(x_test,y_test)))

pipe2.fit(x_train, y_train)

print('Training set score: ' + str(pipe2.score(x_train,y_train)))
print('Test set score: ' + str(pipe2.score(x_test,y_test)))

parameters2 = {
  'selector__threshold': [0, 0.001, 0.01],
 'classifier__n_neighbors': [1, 3, 5, 7, 10],
 'classifier__p': [1, 2],
 'classifier__leaf_size': [1, 5, 10, 15]
}

grid2 = GridSearchCV(pipe2, parameters2, cv=3)
grid2.fit(x_train, y_train)

print('Training set score: ' + str(grid2.score(x_train, y_train)))
print('Test set score: ' + str(grid2.score(x_test, y_test)))

best_params2 = grid2.best_params_
print(best_params2)
best_pipe2 = grid2.best_estimator_
print(best_pipe2)

from google.colab import files


uploaded = files.upload()

st = pd.read_csv('brain_stroke.csv')
st.head()

print(st['gender'].unique())
st['gender'].value_counts()

print(st['ever_married'].unique())
st['ever_married'].value_counts()

print(st['work_type'].unique())
st['work_type'].value_counts()

print(st['Residence_type'].unique())
st['Residence_type'].value_counts()

print(st['smoking_status'].unique())
st['smoking_status'].value_counts()

ohed = pd.get_dummies(st, columns = ['gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'])
ohed.head()

ohed.describe()
x = ohed.drop('stroke', axis = 1)
y = ohed['stroke']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, stratify = y)

pipe3 = Pipeline([
('scaler', StandardScaler()),
('selector', VarianceThreshold()),
('classifier', GradientBoostingClassifier()),

])

print(x_train.dtypes)

pipe3.fit(x_train, y_train)

print('Training set score: ' + str(pipe3.score(x_train,y_train)))
print('Test set score: ' + str(pipe3.score(x_test,y_test)))

parameters3 = {
    'classifier__max_depth': [1, 2, 3, 4,5],
    'classifier__min_samples_leaf': [10, 20, 30]
}

grid3 = GridSearchCV(pipe3, parameters3, cv=3)
grid3.fit(x_train, y_train)

print('Training set score: ' + str(grid3.score(x_train, y_train)))
print('Test set score: ' + str(grid3.score(x_test, y_test)))

best_params3 = grid3.best_params_
print(best_params3)
best_pipe3 = grid3.best_estimator_
print(best_pipe3)

pipe4 = Pipeline([
('scaler', StandardScaler()),
('selector', VarianceThreshold()),
('classifier', KNeighborsClassifier()),

])

pipe4.fit(x_train, y_train)

print('Training set score: ' + str(pipe4.score(x_train,y_train)))
print('Test set score: ' + str(pipe4.score(x_test,y_test)))

parameters4 = {
  'selector__threshold': [0, 0.001, 0.01],
 'classifier__n_neighbors': [1, 3, 5, 7, 10],
 'classifier__p': [1, 2],
 'classifier__leaf_size': [1, 5, 10, 15]
}

grid4 = GridSearchCV(pipe4, parameters4, cv=3)
grid4.fit(x_train, y_train)

print('Training score: ' + str(grid4.score(x_train, y_train)))
print('Test score: ' + str(grid4.score(x_test, y_test)))

best_params4 = grid4.best_params_
print(best_params4)
best_pipe4 = grid4.best_estimator_
print(best_pipe4)

st.info()

st.isnull()
st.isnull().values
st.isnull().values.any()